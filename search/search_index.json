{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Laravel Azampay"},{"location":"#installation","title":"Installation","text":"<p>You can install the package via composer:</p> <pre><code>composer require alphaolomi/laravel-azampay\n</code></pre> <p>You can publish the config file with:</p> <pre><code>php artisan vendor:publish --tag=\"azampay-config\"\n</code></pre>"},{"location":"#usage","title":"Usage","text":""},{"location":"#checkout-api","title":"Checkout API","text":""},{"location":"#mno-checkout","title":"MNO Checkout","text":"<p>MNO checkout using AzampayService Class</p> <pre><code>use Alphaolomi\\Azampay\\AzampayService;\n\n$azampay = new AzampayService();\n\n$data = $azampay-&gt;mobileCheckout([\n    'amount' =&gt; 1000,\n    'currency' =&gt; 'TZS',\n    'accountNumber' =&gt; '0625933171',\n    'externalId' =&gt; '08012345678',\n    'provider' =&gt; 'Mpesa',\n]);\n\n# Response\n[ 'transactionId' =&gt; 'string', 'message' =&gt; 'string' ]\n\n\n</code></pre> <p>MNO checkout using Facade Class</p> <pre><code>use Alphaolomi\\Azampay\\Facades\\Azampay;\n\n$data = Azampay::mobileCheckout([\n    'amount' =&gt; 1000,\n    'currency' =&gt; 'TZS',\n    'accountNumber' =&gt; '0625933171',\n    'externalId' =&gt; '08012345678',\n    'provider' =&gt; 'Mpesa',\n]);\n\n# Response\n[ 'transactionId' =&gt; 'string', 'message' =&gt; 'string' ]\n\n\n</code></pre>"},{"location":"#bank-checkout","title":"Bank Checkout","text":"<p>Bank checkout using AzampayService Class</p> <pre><code>use Alphaolomi\\Azampay\\AzampayService;\n\n$azampay = new AzampayService();\n\n$data = $azampay-&gt;bankCheckout([\n        'amount' =&gt; 1000,\n        'currencyCode' =&gt; 'TZS',\n        'merchantAccountNumber' =&gt; '34567890987654',\n        'merchantMobileNumber' =&gt; '08012345678',\n        'merchantName' =&gt; 'alphaolomi@gmail.com',\n        'otp' =&gt; '1234',\n        'provider' =&gt; 'CRDB',\n        'referenceId' =&gt; '24345345',\n    ]);\n\n# Response\n[ 'transactionId' =&gt; 'string', 'message' =&gt; 'string' ]\n\n\n</code></pre> <p>Bank checkout using Facade Class</p> <pre><code>use Alphaolomi\\Azampay\\Facades\\Azampay;\n\n$data = Azampay::bankCheckout([\n        'amount' =&gt; 1000,\n        'currencyCode' =&gt; 'TZS',\n        'merchantAccountNumber' =&gt; '34567890987654',\n        'merchantMobileNumber' =&gt; '08012345678',\n        'merchantName' =&gt; 'alphaolomi@gmail.com',\n        'otp' =&gt; '1234',\n        'provider' =&gt; 'CRDB',\n        'referenceId' =&gt; '24345345',\n    ]);\n\n# Response\n[ 'transactionId' =&gt; 'string', 'message' =&gt; 'string' ]\n\n</code></pre>"},{"location":"#get-payment-partners","title":"Get payment partners","text":"<p>Get payment partners using AzampayService Class</p> <pre><code>use Alphaolomi\\Azampay\\AzampayService;\n\n$azampay = new AzampayService();\n\n$data = $azampay-&gt;getPaymentPartners();\n\n# Response\n[\n    [\n        'logoUrl' =&gt; 'string',\n        'partnerName' =&gt; 'string',\n        'provider' =&gt; 0,\n        'vendorName' =&gt; 'string',\n        'paymentVendorId' =&gt; '1213c943-b30e-4c9e-ac2f-d34796f01d2d',\n        'paymentPartnerId' =&gt; '70cd6bba-7f81-4ac8-9276-d5c0a189f2d4',\n        'currency' =&gt; 'string'\n    ]\n]\n\n\n</code></pre> <p>Get payment partners using Facade Class</p> <pre><code>use Alphaolomi\\Azampay\\Facades\\Azampay;\n\n$data = Azampay::getPaymentPartners();\n\n# Response\n[\n    [\n        'logoUrl' =&gt; 'string',\n        'partnerName' =&gt; 'string',\n        'provider' =&gt; 0,\n        'vendorName' =&gt; 'string',\n        'paymentVendorId' =&gt; '1213c943-b30e-4c9e-ac2f-d34796f01d2d',\n        'paymentPartnerId' =&gt; '70cd6bba-7f81-4ac8-9276-d5c0a189f2d4',\n        'currency' =&gt; 'string'\n    ]\n]\n\n</code></pre>"},{"location":"#post-checkout","title":"Post Checkout","text":"<p>Post checkout using AzampayService Class</p> <pre><code>use Alphaolomi\\Azampay\\AzampayService;\n\n$azampay = new AzampayService();\n\n$data = $azampay-&gt;postCheckout([\n        'appName' =&gt; 'azampay',\n        'clientId' =&gt; 'e9b57fab-1850',\n        'vendorId' =&gt; 'e9b57fab-1850-44d4-8499-71fd15c845a0',\n        'language' =&gt; 'en',\n        'currency' =&gt; 'TZS',\n        'externalId' =&gt; 'e9b57fab-44d4-71fd15c845a6',\n        'requestOrigin' =&gt; 'dukaspace.com',\n        'redirectFailURL' =&gt; 'dukaspace.com/failure',\n        'redirectSuccessURL' =&gt; 'dukaspace.com/success',\n        'vendorName' =&gt; 'dukaspace',\n        'amount' =&gt; 50000,\n        'cart' =&gt; [\n            'items' =&gt; [\n                [\n                    'name' =&gt; 'dukaspace',\n                ],\n            ],\n        ],\n    ]);\n\n# Response\n[ 'transactionId' =&gt; 'string', 'message' =&gt; 'string' ]\n\n\n</code></pre> <p>Post checkout using Facade Class</p> <pre><code>use Alphaolomi\\Azampay\\Facades\\Azampay;\n\n$data = Azampay::postCheckout([\n        'appName' =&gt; 'azampay',\n        'clientId' =&gt; 'e9b57fab-1850',\n        'vendorId' =&gt; 'e9b57fab-1850-44d4-8499-71fd15c845a0',\n        'language' =&gt; 'en',\n        'currency' =&gt; 'TZS',\n        'externalId' =&gt; 'e9b57fab-44d4-71fd15c845a6',\n        'requestOrigin' =&gt; 'dukaspace.com',\n        'redirectFailURL' =&gt; 'dukaspace.com/failure',\n        'redirectSuccessURL' =&gt; 'dukaspace.com/success',\n        'vendorName' =&gt; 'dukaspace',\n        'amount' =&gt; 50000,\n        'cart' =&gt; [\n            'items' =&gt; [\n                [\n                    'name' =&gt; 'dukaspace',\n                ],\n            ],\n        ],\n    ]);\n\n# Response\n'string'\n\n</code></pre>"},{"location":"#callback","title":"Callback","text":"<p>When the package the callback from azampay it will dispatch Event <code>AzampayCallback::class</code> . You can create a listener and do further process with the callback data which will be pass when the event get dispatch.</p> <p>On you <code>App\\Providers\\EventServiceProvider</code> register a listener for <code>AzampayCallback::class</code> event.</p> <pre><code>use Alphaolomi\\Azampay\\Events\\AzampayCallback;\nuse App\\Listeners\\YourEventListener;\n\n/**\n * The event listener mappings for the application.\n *\n * @var array\n */\nprotected $listen = [\n    AzampayCallback::class =&gt; [\n        YourEventListener::class,\n    ],\n];\n\n</code></pre>"},{"location":"#disbursement-api","title":"Disbursement API","text":""},{"location":"#create-transfer","title":"Create transfer","text":"<p>Create transfer using AzampayService Class</p> <pre><code>use Alphaolomi\\Azampay\\AzampayService;\n\n$azampay = new AzampayService();\n\n$data = $azampay-&gt;createTransfer([\n        'source' =&gt; [\n            'countryCode' =&gt; 'string',\n            'fullName' =&gt; 'string',\n            'bankName' =&gt; 'tigo',\n            'accountNumber' =&gt; 'string',\n            'currency' =&gt; 'string',\n        ],\n        'destination' =&gt; [\n            'countryCode' =&gt; 'string',\n            'fullName' =&gt; 'string',\n            'bankName' =&gt; 'tigo',\n            'accountNumber' =&gt; 'string',\n            'currency' =&gt; 'string',\n        ],\n        'transferDetails' =&gt; [\n            'type' =&gt; 'string',\n            'amount' =&gt; 0,\n            'date' =&gt; '2019-08-24T141522Z',\n        ],\n        'externalReferenceId' =&gt; 'string',\n        'remarks' =&gt; 'string',\n    ]);\n\n# Response\n[\n    [\n        'data' =&gt; 'Transaction successful.',\n        'message' =&gt; 'Request successful.',\n        'success' =&gt; true,\n        'statusCode' =&gt; 200\n    ]\n]\n\n\n</code></pre> <p>Create transfer using Facade Class</p> <pre><code>use Alphaolomi\\Azampay\\Facades\\Azampay;\n\n$data = Azampay::createTransfer([\n        'source' =&gt; [\n            'countryCode' =&gt; 'string',\n            'fullName' =&gt; 'string',\n            'bankName' =&gt; 'tigo',\n            'accountNumber' =&gt; 'string',\n            'currency' =&gt; 'string',\n        ],\n        'destination' =&gt; [\n            'countryCode' =&gt; 'string',\n            'fullName' =&gt; 'string',\n            'bankName' =&gt; 'tigo',\n            'accountNumber' =&gt; 'string',\n            'currency' =&gt; 'string',\n        ],\n        'transferDetails' =&gt; [\n            'type' =&gt; 'string',\n            'amount' =&gt; 0,\n            'date' =&gt; '2019-08-24T141522Z',\n        ],\n        'externalReferenceId' =&gt; 'string',\n        'remarks' =&gt; 'string',\n    ]);\n\n# Response\n[\n    [\n        'data' =&gt; 'Transaction successful.',\n        'message' =&gt; 'Request successful.',\n        'success' =&gt; true,\n        'statusCode' =&gt; 200\n    ]\n]\n\n</code></pre>"},{"location":"#name-lookup","title":"Name lookup","text":"<p>Name lookup using AzampayService Class</p> <pre><code>use Alphaolomi\\Azampay\\AzampayService;\n\n$azampay = new AzampayService();\n\n$data = $azampay-&gt;nameLookup([\n        'bankName' =&gt; 'string',\n        'accountNumber' =&gt; 'string',\n    ]);\n\n# Response\n[\n    'name' =&gt; 'string',\n    'message' =&gt; 'string',\n    'success' =&gt; true,\n    'accountNumber' =&gt; 'string',\n    'bankName' =&gt; 'string'\n]\n\n</code></pre> <p>Name lookup using Facade Class</p> <pre><code>use Alphaolomi\\Azampay\\Facades\\Azampay;\n\n$data = Azampay::nameLookup([\n        'bankName' =&gt; 'string',\n        'accountNumber' =&gt; 'string',\n    ]);\n\n# Response\n[\n    'name' =&gt; 'string',\n    'message' =&gt; 'string',\n    'success' =&gt; true,\n    'accountNumber' =&gt; 'string',\n    'bankName' =&gt; 'string'\n]\n\n</code></pre>"},{"location":"#get-transaction-status","title":"Get transaction status","text":"<p>Get transaction status using AzampayService Class</p> <pre><code>use Alphaolomi\\Azampay\\AzampayService;\n\n$azampay = new AzampayService();\n\n$data = $azampay-&gt;getTransactionStatus([\n            'bankName' =&gt; 'CRDB', \n            'pgReferenceId' =&gt; '10'\n        ]);\n\n# Response\n[\n    [\n        'data': 'Transaction successful.',\n        'message': 'Request successful.',\n        'success': true,\n        'statusCode': 200\n    ]\n]\n\n</code></pre> <p>Get transaction status using Facade Class</p> <pre><code>use Alphaolomi\\Azampay\\Facades\\Azampay;\n\n$data = Azampay::getTransactionStatus([\n    'bankName' =&gt; 'CRDB', \n    'pgReferenceId' =&gt; '10'\n    ]);\n\n# Response\n[\n    [\n        'data': 'Transaction successful.',\n        'message': 'Request successful.',\n        'success': true,\n        'statusCode': 200\n    ]\n]\n\n</code></pre>"},{"location":"#azampay-documentation","title":"Azampay documentation","text":"<p>You can find more details about azampay on their documentation in this link Azampay Documentation.</p>"},{"location":"#testing","title":"Testing","text":"<pre><code>composer test\n</code></pre>"},{"location":"#changelog","title":"Changelog","text":"<p>Please see CHANGELOG for more information on what has changed recently.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Please see CONTRIBUTING for details.</p>"},{"location":"#security-vulnerabilities","title":"Security Vulnerabilities","text":"<p>Please review our security policy on how to report security vulnerabilities.</p>"},{"location":"#credits","title":"Credits","text":"<ul> <li>Alpha Olomi</li> <li>omakei</li> <li>All Contributors</li> </ul>"},{"location":"#license","title":"License","text":"<p>The MIT License (MIT). Please see License File for more information.</p>"}]}